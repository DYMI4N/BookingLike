@model BookingLike.Models.Reservation

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Reservation</h4>
<hr />
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <strong>Błędy walidacji:</strong>
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label for="dateRange">Zakres dat</label>
                <input type="text" id="dateRange" class="form-control" />
            </div>
            <input type="hidden" name="StartDate" id="StartDate" />
            <input type="hidden" name="EndDate" id="EndDate" />
            <input type="hidden" asp-for="RoomId" />

            <input type="hidden" id="PricePerNight" value="@ViewBag.PricePerNight" />
            <input type="hidden" id="TotalPriceHidden" name="TotalPrice" value="@Model.TotalPrice.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture)" />
            <div class="form-group">
                <label for="TotalPriceDisplay">Cena całkowita</label>
                <input type="text" id="TotalPriceDisplay" class="form-control" readonly />
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const picker = new Litepicker({
                element: document.getElementById('dateRange'),
                singleMode: false,
                format: 'YYYY-MM-DD',
                lang: 'pl-PL',
                minDate: new Date(),
                lockDays: @Html.Raw(Json.Serialize(ViewBag.BookedDates ?? new List<string>())),
                setup: (picker) => {
                    picker.on('selected', (start, end) => {
                        const days = end.diff(start, 'days');
                        const price = parseFloat(document.getElementById("PricePerNight").value);
                        const total = days > 0 ? (price * days).toFixed(2) : 0;

                        document.getElementById("TotalPriceHidden").value = total.replace(".", ",");
                        document.getElementById("TotalPriceDisplay").value = total.toLocaleString('pl-PL', { style: 'currency', currency: 'PLN' });
                        document.getElementById("StartDate").value = start.format('YYYY-MM-DD');
                        document.getElementById("EndDate").value = end.format('YYYY-MM-DD');
                    });
                }
            });
        });
    </script>

}


